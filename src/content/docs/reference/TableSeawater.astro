---
const seawaterData = [
  {
    abbr: 'SEAWTR_DENSITY',
    inputs: ['Temperature, °C', 'Salinity, g/kg', 'Pressure, bar.a'],
    result: 'kg/m3',
    description: 'Get Seawater Density'
  },
  {
    abbr: 'SEAWTR_VOLUME',
    inputs: ['Temperature, °C', 'Salinity, g/kg', 'Pressure, bar.a'],
    result: 'm3/kg',
    description: 'Get Seawater Specific Volume'
  },
  {
    abbr: 'SEAWTR_ENTHALPY',
    inputs: ['Temperature, °C', 'Salinity, g/kg', 'Pressure, bar.a'],
    result: 'kJ/kg',
    description: 'Get Seawater Enthalpy'
  },
  {
    abbr: 'SEAWTR_SPCHEAT',
    inputs: ['Temperature, °C', 'Salinity, g/kg', 'Pressure, bar.a'],
    result: 'kJ/kg-K',
    description: 'Get Seawater Specific Heat'
  },
  {
    abbr: 'SEAWTR_PSAT',
    inputs: ['Temperature, °C', 'Salinity, g/kg'],
    result: 'bar.a',
    description: 'Get Seawater Vapor Pressure'
  },
  {
    abbr: 'SEAWTR_CONDUCTIVITY',
    inputs: ['Temperature, °C', 'Salinity, g/kg'],
    result: 'W/m-K',
    description: 'Get Seawater Thermal Conductivity'
  },
  {
    abbr: 'SEAWTR_VISCOSITY',
    inputs: ['Temperature, °C', 'Salinity, g/kg'],
    result: 'Pa.s',
    description: 'Get Seawater Dynamic Viscosity'
  },
  {
    abbr: 'SW_KVISCOSITY',
    inputs: ['Temperature, °C', 'Salinity, g/kg'],
    result: 'm2/s',
    description: 'Get Seawater Kinematic Viscosity'
  },
  {
    abbr: 'SEAWTR_DIFFUSIVITY',
    inputs: ['Temperature, °C', 'Salinity, g/kg'],
    result: 'm2/s',
    description: 'Get Seawater Thermal Diffusivity'
  },
  {
    abbr: 'SEAWTR_ENTROPY',
    inputs: ['Temperature, °C', 'Salinity, g/kg', 'Pressure, bar.a'],
    result: 'kJ/kg-K',
    description: 'Get Seawater Entropy'
  },
  {
    abbr: 'SEAWTR_GIBBS',
    inputs: ['Temperature, °C', 'Salinity, g/kg', 'Pressure, bar.a'],
    result: 'kJ/kg',
    description: 'Get Seawater Gibbs Energy'
  },
  {
    abbr: 'SEAWTR_INTENERGY',
    inputs: ['Temperature, °C', 'Salinity, g/kg', 'Pressure, bar.a'],
    result: 'kJ/kg',
    description: 'Get Seawater Internal Energy'
  },
  {
    abbr: 'SEAWTR_LATENTHEAT',
    inputs: ['Temperature, °C', 'Salinity, g/kg'],
    result: 'kJ/kg',
    description: 'Get Seawater Latent Heat of Vaporization'
  },
  {
    abbr: 'SEAWTR_BPE',
    inputs: ['Temperature, °C', 'Salinity, g/kg'],
    result: 'K',
    description: 'Get Seawater Boiling Point Elevation'
  },
  {
    abbr: 'SEAWTR_ISOBEXP',
    inputs: ['Temperature, °C', 'Salinity, g/kg', 'Pressure, bar.a'],
    result: '1/K',
    description: 'Get Seawater Isobaric Thermal Expansivity'
  },
  {
    abbr: 'SEAWTR_ISOTHCOMP',
    inputs: ['Temperature, °C', 'Salinity, g/kg', 'Pressure, bar.a'],
    result: '1/bar.a',
    description: 'Get Seawater Isothermal Compressibility'
  },
  {
    abbr: 'SEAWTR_PRANDTL',
    inputs: ['Temperature, °C', 'Salinity, g/kg'],
    result: '-',
    description: 'Get Seawater Prandtl Number'
  },
  {
    abbr: 'SEAWTR_CHEMPOT_S',
    inputs: ['Temperature, °C', 'Salinity, g/kg', 'Pressure, bar.a'],
    result: 'kJ/kg',
    description: 'Get Seawater Chemical Potential of Salt'
  },
  {
    abbr: 'SEAWTR_CHEMPOT_W',
    inputs: ['Temperature, °C', 'Salinity, g/kg', 'Pressure, bar.a'],
    result: 'kJ/kg',
    description: 'Get Seawater Chemical Potential of Water'
  },
  {
    abbr: 'SEAWTR_OSMCOEFF',
    inputs: ['Temperature, °C', 'Salinity, g/kg'],
    result: '-',
    description: 'Get Seawater Osmotic Coefficient'
  },
  {
    abbr: 'SEAWTR_OSMPRESS',
    inputs: ['Temperature, °C', 'Salinity, g/kg'],
    result: 'bar.a',
    description: 'Get Seawater Osmotic Pressure'
  },
  {
    abbr: 'SEAWTR_SURFACETENSION',
    inputs: ['Temperature, °C', 'Salinity, g/kg'],
    result: 'mN/m',
    description: 'Get Seawater Surface Tension'
  },
  {
    abbr: 'SEAWTR_FLOWEXERGY',
    inputs: ['Temperature, °C', 'Salinity, g/kg', 'Pressure, bar.a', 'T0, °C', 'S0, g/kg', 'P0, bar.a'],
    result: 'kJ/kg',
    description: 'Get Seawater Flow Exergy'
  }
];
---

<div class="seawater-table">
  <table>
    <thead>
      <tr>
        <th>Abbr.</th>
        <th>INPUT Unit</th>
        <th>RESULT Unit</th>
        <th>Function Description</th>
      </tr>
    </thead>
    <tbody>
      {seawaterData.map((item) => (
        <tr>
          <td class="abbr">{item.abbr}</td>
          <td class="inputs">
            {item.inputs.map((input, index) => (
              <>
                {input}
                {index < item.inputs.length - 1 && <br />}
              </>
            ))}
          </td>
          <td class="result">{item.result}</td>
          <td class="description">{item.description}</td>
        </tr>
      ))}
    </tbody>
  </table>
</div>

<style>
  .seawater-table {
    width: 100%;
    overflow-x: auto;
    margin: 1rem 0;
  }

  table {
    width: 100%;
    border-collapse: collapse;
    font-size: 0.9rem;
  }

  th, td {
    padding: 0.75rem;
    text-align: left;
    border: 1px solid var(--sl-color-gray-5);
  }

  th {
    background-color: var(--sl-color-gray-6);
    font-weight: 600;
  }

  tr:nth-child(even) {
    background-color: var(--sl-color-gray-1);
  }

  .abbr {
    white-space: nowrap;
  }

  .inputs {
    min-width: 200px;
  }

  .result {
    white-space: nowrap;
  }

  .description {
    min-width: 200px;
  }

  @media (max-width: 768px) {
    table {
      font-size: 0.8rem;
    }

    th, td {
      padding: 0.5rem;
    }
  }
</style>
